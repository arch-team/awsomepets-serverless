AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWSome Petstore template
Parameters:
  StageName:
    Type: String
    Default: v1
    AllowedValues:
    - v1
Resources:
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Saga website pattern
  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Cloudfront distribution for serverless website
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Origins:
        - Id: s3-website
          DomainName:
            Fn::GetAtt:
            - S3Bucket
            - DomainName
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        DefaultCacheBehavior:
          Compress: 'true'
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy: redirect-to-https
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: awsomepets-lab8-${AWS::AccountId}
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: S3Bucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: s3:GetObject
          Resource:
          - Fn::Sub: arn:aws:s3:::${S3Bucket}/*
          Principal:
            AWS:
              Fn::Sub: arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
                ${CloudFrontOriginAccessIdentity}
  OrderWSCallbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: OrderWSCallbackFunction
      Description: Callback to Websocket client with Order success or fail status
      Environment:
        Variables:
          WS_CONNECTION_URL:
            Fn::Sub: https://${CallbackWSAPI}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/@connections
          CLIENT_CALLBACK_TABLE:
            Ref: ClientCallbackTable
      Handler: index.handler
      CodeUri: OrderWSCallbackFunction
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ClientCallbackTable
      - AmazonAPIGatewayInvokeFullAccess
  PopulateCatalogueFunction:
    Type: AWS::Serverless::Function
    DependsOn: CatalogueTable
    Properties:
      FunctionName: PopulateCatalogueFunction
      Description: Helper function to populate catalogue items
      Environment:
        Variables:
          CATALOGUE_TABLE:
            Ref: CatalogueTable
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: CatalogueTable
      InlineCode: "const AWS = require('aws-sdk');\nconst ddb = new AWS.DynamoDB.DocumentClient();\n\
        const catalogueTable = process.env.CATALOGUE_TABLE;\nconst CFN_RESPONSE =\
        \ require('cfn-response');\n\nexports.handler = (event, context) => {\n  console.log(\"\
        REQUEST RECEIVED:\\n\" + JSON.stringify(event))\n\n  // For Delete requests,\
        \ immediately send a SUCCESS response.\n  if (event.RequestType == \"Delete\"\
        ) {\n    CFN_RESPONSE.send(event, context, \"SUCCESS\", {});\n    return;\n\
        \  }\n\n  // List of catalogue times\n  let items  = [\n    { \"id\": \"9305f481-8399-43de-9912-fd3d2b9f1069\"\
        , \"title\": \"Cat\", \"unitPrice\": 150, \"imageUrl\": \"/images/cat.jpg\"\
        \ },\n    { \"id\": \"417e0721-4317-41a6-bb57-54646ace9a0b\", \"title\": \"\
        Dog\", \"unitPrice\": 200, \"imageUrl\": \"/images/dog.jpg\"  },\n    { \"\
        id\": \"81ad9dae-3f63-4e64-baac-a984dfc2fb28\", \"title\": \"Bird\", \"unitPrice\"\
        : 30, \"imageUrl\": \"/images/bird.jpg\"  },\n    { \"id\": \"c7ced823-9d1b-4c36-8087-0b15208c94f7\"\
        , \"title\": \"Fish\", \"unitPrice\": 10, \"imageUrl\": \"/images/fish.jpg\"\
        \  },\n    { \"id\": \"1212b901-05c3-486e-af51-de54054604f8\", \"title\":\
        \ \"Rabbit\", \"unitPrice\": 50, \"imageUrl\": \"/images/rabbit.jpg\" },\n\
        \    { \"id\": \"0d1b5d4d-1206-4462-842f-130a9545a08f\", \"title\": \"Hamster\"\
        , \"unitPrice\": 30, \"imageUrl\": \"/images/hamster.jpg\" },\n    { \"id\"\
        : \"c2429581-7fd0-4ee5-b5c9-02a42be68db0\", \"title\": \"Pony\", \"unitPrice\"\
        : 3000, \"imageUrl\": \"/images/pony.jpg\" },\n    { \"id\": \"3aad800f-44e2-445b-9bec-cbb7f0b14bef\"\
        , \"title\": \"Chicken\", \"unitPrice\": 20, \"imageUrl\": \"/images/chicken.jpg\"\
        \  }\n  ];\n\n  // Build the dynamodb json PutRequest\n  let catalogueItems\
        \ = [];\n  for(let i=0; i<items.length;i++) {\n    catalogueItems.push({\n\
        \      PutRequest: {\n        Item: {\n          id: items[i].id,\n      \
        \    title: items[i].title,\n          unitPrice: items[i].unitPrice,\n  \
        \        imageUrl: items[i].imageUrl\n        }\n      }\n    });\n  }\n\n\
        \  let params = {\n    RequestItems: {\n      [catalogueTable]: catalogueItems\n\
        \    }\n  };\n\n  console.log(params);\n\n  ddb.batchWrite(params, function(err,\
        \ data) {\n    if(err) {\n      CFN_RESPONSE.send(event, context, \"FAILED\"\
        , {Error: \"Invoke PopulateCatalogueFunction call failed\"});\n    } else\
        \ {\n      CFN_RESPONSE.send(event, context, \"SUCCESS\", {});\n    }\n  });\n\
        };\n"
  Primerinvoke:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: PopulateCatalogueFunction
    Version: '1.0'
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - PopulateCatalogueFunction
        - Arn
  CancelOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CancelOrderFunction
      Description: Cancel the order function
      Environment:
        Variables:
          ORDERS_TABLE:
            Ref: OrdersTable
      Handler: index.handler
      CodeUri: CancelOrderFunction
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: OrdersTable
  CreateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Create a new order and trigger the Order Saga transaction
      Environment:
        Variables:
          ORDERS_TABLE:
            Ref: OrdersTable
          WS_API_STAGE:
            Ref: StageName
          WS_API_URL:
            Fn::Sub: wss://${CallbackWSAPI}.execute-api.${AWS::Region}.amazonaws.com
          ORDER_ORCHESTRATOR_ARN:
            Fn::GetAtt:
            - StepFunctionsStateMachine
            - Arn
      FunctionName: CreateOrderFunction
      Handler: index.handler
      CodeUri: CreateOrderFunction
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: OrdersTable
      - StepFunctionsExecutionPolicy:
          StateMachineName:
            Fn::GetAtt:
            - StepFunctionsStateMachine
            - Name
  ReleaseInventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Release items back to be available to inventory
      Environment:
        Variables:
          INVENTORY_TABLE:
            Ref: InventoryTable
      FunctionName: ReleaseInventoryFunction
      Handler: index.handler
      CodeUri: ReleaseInventoryFunction
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: InventoryTable
  CompleteOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Complete order processing and set order status flag to 'completed'
      Environment:
        Variables:
          ORDERS_TABLE:
            Ref: OrdersTable
      FunctionName: CompleteOrderFunction
      Handler: index.handler
      CodeUri: CompleteOrderFunction
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: OrdersTable
  ProcessPaymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Process the order's payment details
      Environment:
        Variables:
          PAYMENTS_TABLE:
            Ref: PaymentsTable
          FETCH_CATALOGUE_ENDPOINT:
            Fn::Sub: https://${CatalogueRESTAPI}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/catalogue
      FunctionName: ProcessPaymentFunction
      Handler: index.handler
      CodeUri: ProcessPaymentFunction
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: PaymentsTable
  ReserveInventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Reserve items in the shopping cart for the order
      Environment:
        Variables:
          INVENTORY_TABLE:
            Ref: InventoryTable
      FunctionName: ReserveInventoryFunction
      Handler: index.handler
      CodeUri: ReserveInventoryFunction
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: InventoryTable
  OrderWSConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: On Websocket client connect, register it's connection id against
        the order id
      Environment:
        Variables:
          CLIENT_CALLBACK_TABLE:
            Ref: ClientCallbackTable
      FunctionName: OrderWSConnectFunction
      Handler: index.handler
      CodeUri: OrderWSConnectFunction
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ClientCallbackTable
  OrderWSDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: On Client Websocket disconnect remove from listening to order
      Environment:
        Variables:
          CLIENT_CALLBACK_TABLE:
            Ref: ClientCallbackTable
      FunctionName: OrderWSDisconnectFunction
      Handler: index.handler
      CodeUri: OrderWSDisconnectFunction
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ClientCallbackTable
  OrderWSPendingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Get pending order callbacks
      Environment:
        Variables:
          CLIENT_CALLBACK_TABLE:
            Ref: ClientCallbackTable
      FunctionName: OrderWSPendingFunction
      Handler: index.handler
      CodeUri: OrderWSPendingFunction
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ClientCallbackTable
  ProcessRefundFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Process order refund
      Environment:
        Variables:
          PAYMENTS_TABLE:
            Ref: PaymentsTable
      FunctionName: ProcessRefundFunction
      Handler: index.handler
      CodeUri: ProcessRefundFunction
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: PaymentsTable
  FetchCatalogueByIdsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Fetch catalogue items by ids
      Environment:
        Variables:
          CATALOGUE_TABLE:
            Ref: CatalogueTable
      FunctionName: FetchCatalogueByIdsFunction
      Handler: index.handler
      CodeUri: FetchCatalogueByIdsFunction
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: CatalogueTable
  CatalogueTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: CatalogueTbl
      KeySchema:
      - AttributeName: id
        KeyType: HASH
  ClientCallbackTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: connectionId
        AttributeType: S
      - AttributeName: orderId
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: ClientCallbackTbl
      KeySchema:
      - AttributeName: orderId
        KeyType: HASH
      - AttributeName: connectionId
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: connectionId-orderId-index
        KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
        - AttributeName: orderId
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 0
          WriteCapacityUnits: 0
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: orderId
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: OrdersTbl
      KeySchema:
      - AttributeName: orderId
        KeyType: HASH
  InventoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: orderId
        AttributeType: S
      - AttributeName: sk
        AttributeType: S
      - AttributeName: transactionDate
        AttributeType: N
      BillingMode: PAY_PER_REQUEST
      TableName: InventoryTbl
      KeySchema:
      - AttributeName: orderId
        KeyType: HASH
      - AttributeName: sk
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: sk-transactionDate-index
        KeySchema:
        - AttributeName: sk
          KeyType: HASH
        - AttributeName: transactionDate
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 0
          WriteCapacityUnits: 0
  PaymentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: orderId
        AttributeType: S
      - AttributeName: transactionDate
        AttributeType: N
      BillingMode: PAY_PER_REQUEST
      TableName: PaymentsTbl
      KeySchema:
      - AttributeName: orderId
        KeyType: HASH
      - AttributeName: transactionDate
        KeyType: RANGE
  OrderSagaFailTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ''
      TopicName: OrderSagaFailTopic
  OrderSagaSuccessTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ''
      TopicName: OrderSagaSuccessTopic
  StepFunctionsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: OrderOrchestrator
      DefinitionUri: ../../statemachine/order-orchestrator.asl.json
      DefinitionSubstitutions:
        ReserveInventoryFunctionArn:
          Fn::GetAtt:
          - ReserveInventoryFunction
          - Arn
        ReleaseInventoryFunctionArn:
          Fn::GetAtt:
          - ReleaseInventoryFunction
          - Arn
        ProcessPaymentFunctionArn:
          Fn::GetAtt:
          - ProcessPaymentFunction
          - Arn
        ProcessRefundFunctionArn:
          Fn::GetAtt:
          - ProcessRefundFunction
          - Arn
        CompleteOrderFunctionArn:
          Fn::GetAtt:
          - CompleteOrderFunction
          - Arn
        CancelOrderFunctionArn:
          Fn::GetAtt:
          - CancelOrderFunction
          - Arn
        OrderWSCallbackFunctionArn:
          Fn::GetAtt:
          - OrderWSCallbackFunction
          - Arn
        OrderSagaFailTopicArn: arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${OrderSagaFailTopic.TopicName}
      Type: STANDARD
      Policies:
      - LambdaInvokePolicy:
          FunctionName:
            Ref: ReserveInventoryFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: ReleaseInventoryFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: ProcessPaymentFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: ProcessRefundFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: CompleteOrderFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: CancelOrderFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: OrderWSCallbackFunction
      - SNSPublishMessagePolicy:
          TopicName:
            Fn::GetAtt:
            - OrderSagaFailTopic
            - TopicName
  ApiGatewayConfig:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiGatewayLoggingRole
        - Arn
  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - Fn::Sub: arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  OrderRESTAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: CreateOrderAPI
      Description: Create Order API
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
        - REGIONAL
  OrderRESTStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName:
        Ref: StageName
      DeploymentId:
        Ref: OrderRESTDeployment
      RestApiId:
        Ref: OrderRESTAPI
      CacheClusterEnabled: false
      MethodSettings:
      - ResourcePath: /order
        CacheDataEncrypted: false
        CacheTtlInSeconds: 300
        CachingEnabled: false
        DataTraceEnabled: true
        HttpMethod: POST
        LoggingLevel: ERROR
        MetricsEnabled: true
        ThrottlingBurstLimit: 5000
        ThrottlingRateLimit: 10000
      TracingEnabled: true
  OrderRESTResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: OrderRESTAPI
      PathPart: order
      ParentId:
        Fn::GetAtt:
        - OrderRESTAPI
        - RootResourceId
  OrderRESTPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: OrderRESTAPI
      ResourceId:
        Ref: OrderRESTResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
        StatusCode: '200'
      Integration:
        CacheNamespace:
          Ref: OrderRESTResource
        ContentHandling: CONVERT_TO_TEXT
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates: {}
          StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CreateOrderFunction}/invocations
  OrderRESTOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: OrderRESTAPI
      ResourceId:
        Ref: OrderRESTResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
        StatusCode: '200'
      Integration:
        CacheNamespace:
          Ref: OrderRESTResource
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates: {}
          StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        TimeoutInMillis: 29000
        Type: MOCK
  OrderRESTDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - OrderRESTPostMethod
    - OrderRESTOptionsMethod
    Properties:
      RestApiId:
        Ref: OrderRESTAPI
  CatalogueRESTAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: CatalogueAPI
      Description: Catalogue API
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
        - REGIONAL
  CatalogueRESTStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName:
        Ref: StageName
      DeploymentId:
        Ref: CatalogueRESTDeployment
      RestApiId:
        Ref: CatalogueRESTAPI
      CacheClusterEnabled: false
      MethodSettings:
      - ResourcePath: /catalogue
        CacheDataEncrypted: false
        CacheTtlInSeconds: 300
        CachingEnabled: false
        DataTraceEnabled: true
        HttpMethod: POST
        LoggingLevel: ERROR
        MetricsEnabled: true
        ThrottlingBurstLimit: 5000
        ThrottlingRateLimit: 10000
      TracingEnabled: true
  CatalogueRESTResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: CatalogueRESTAPI
      PathPart: catalogue
      ParentId:
        Fn::GetAtt:
        - CatalogueRESTAPI
        - RootResourceId
  CatalogueRESTPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: CatalogueRESTAPI
      ResourceId:
        Ref: CatalogueRESTResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
        StatusCode: '200'
      Integration:
        CacheNamespace:
          Ref: CatalogueRESTResource
        ContentHandling: CONVERT_TO_TEXT
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates: {}
          StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FetchCatalogueByIdsFunction}/invocations
  CatalogueRESTDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - CatalogueRESTPostMethod
    Properties:
      RestApiId:
        Ref: CatalogueRESTAPI
  CallbackWSAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: OrderCallbackAPI
      ApiKeySelectionExpression: $request.header.x-api-key
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
      DisableExecuteApiEndpoint: false
  CallbackWSStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName:
        Ref: StageName
      StageVariables: {}
      ApiId:
        Ref: CallbackWSAPI
      DeploymentId:
        Ref: CallbackWSDeployment
      RouteSettings: {}
      DefaultRouteSettings:
        DataTraceEnabled: false
        DetailedMetricsEnabled: false
        LoggingLevel: ERROR
  CallbackWSConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: CallbackWSAPI
      ApiKeyRequired: false
      AuthorizationType: NONE
      RouteKey: $connect
      Target:
        Fn::Sub: integrations/${CallbackConnectIntegration}
  CallbackConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: CallbackWSAPI
      ConnectionType: INTERNET
      ContentHandlingStrategy: CONVERT_TO_TEXT
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${OrderWSConnectFunction}/invocations
      PassthroughBehavior: WHEN_NO_MATCH
      TimeoutInMillis: 29000
      PayloadFormatVersion: '1.0'
  CallbackWSDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - CallbackWSConnectRoute
    Properties:
      ApiId:
        Ref: CallbackWSAPI
  CreateOrderAPIPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - OrderRESTAPI
    - CreateOrderFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: CreateOrderFunction
      Principal: apigateway.amazonaws.com
  CatalogueAPIPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - CatalogueRESTAPI
    - FetchCatalogueByIdsFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: FetchCatalogueByIdsFunction
      Principal: apigateway.amazonaws.com
  WSConnectAPIPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - CallbackWSAPI
    - OrderWSConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OrderWSConnectFunction
      Principal: apigateway.amazonaws.com
  WSDisconnectAPIPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - CallbackWSAPI
    - OrderWSDisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OrderWSDisconnectFunction
      Principal: apigateway.amazonaws.com
  WSPendingAPIPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - CallbackWSAPI
    - OrderWSPendingFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OrderWSPendingFunction
      Principal: apigateway.amazonaws.com
Outputs:
  OriginURL:
    Description: S3 website bucket to test
    Value:
      Fn::GetAtt:
      - CloudfrontDistribution
      - DomainName
  BucketName:
    Description: S3 bucketName
    Value:
      Ref: S3Bucket
  ApiGatewayInvokeURL:
    Description: The CreateOrderAPI URL that the client will call to create a new
      order
    Value:
      Fn::Sub: https://${OrderRESTAPI}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/order
